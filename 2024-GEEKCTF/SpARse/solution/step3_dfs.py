################################################### part3 get k,kp,kq(using sparse_solve_k_kp_kq)
k = 39770
d
# kp,kq = 64743,30590
kq, kp = 64743, 30590


################################################### part4 dfs
pbits = 1024
P, Q, DP, DQ, D = p[::-1], q[::-1], dp[::-1], dq[::-1], d[::-1]


def find(pl, ql, dl, dpl, dql, h):
    if h == 700:
        print(pl)
    ######## check
    if h == pbits:
        pp = int(pl, 2)
        if n % pp == 0:
            print(pp)
            print(n // pp)
            exit()
        return

    ######## prune
    if h > 0:
        pi = int(pl, 2)
        qi = int(ql, 2)
        di = int(dl, 2)
        dpi = int(dpl, 2)
        dqi = int(dql, 2)
        mask = 2**h

        if pi * qi % mask != n % mask:
            return
        if e * di % mask != (k * (n - pi - qi + 1) + 1) % mask:
            return
        if e * dpi % mask != (kp * (pi - 1) + 1) % mask:
            return
        if e * dqi % mask != (kq * (qi - 1) + 1) % mask:
            return

    ######## search
    pos_p = ["0", "1"] if P[h] == "*" else [P[h]]
    pos_q = ["0", "1"] if Q[h] == "*" else [Q[h]]
    pos_d = ["0", "1"] if D[h] == "*" else [D[h]]
    pos_dp = ["0", "1"] if DP[h] == "*" else [DP[h]]
    pos_dq = ["0", "1"] if DQ[h] == "*" else [DQ[h]]

    for ii in pos_p:
        for jj in pos_q:
            for kk in pos_d:
                for mm in pos_dp:
                    for nn in pos_dq:
                        find(ii + pl, jj + ql, kk + dl, mm + dpl, nn + dql, h + 1)


find("", "", "", "", "", 0)
