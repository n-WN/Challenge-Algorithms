from Crypto.Util.number import *
from hashlib import sha256
from gmpy2 import next_prime

flag = b'xxxx'
def RSA_key_generate():
    e = 65537
    P = getPrime(512)
    Q = getPrime(512)
    prec = 1200
    ring = RealField(prec)
    k = ring(P) / ring(Q)
    Y = P*Q
    return Y,e,k

def Klepto_RSA_key_generate(e,Y):
    while True:
        s = getRandomNBitInteger(1024)
        p = next_prime(int(sha256(str(s).encode()*4).hexdigest(),16))
        if isPrime(p):
            RND = getRandomNBitInteger(1024)
            c = pow(s,e,Y)
            tmp = long_to_bytes(c) + long_to_bytes(RND)
            tmp_ = bytes_to_long(tmp)
            q = tmp_ // p
            if isPrime(q):
                r = tmp_ % p
                n = p*q
                return n
            else:
                continue

def encrypt(flag,n):
    m = bytes_to_long(flag)
    enc = pow(m,65537,n)
    return enc

Y,e,k = RSA_key_generate()
n = Klepto_RSA_key_generate(e,Y)
c = encrypt(flag,n)

print(f'Y = {Y}')
print(f'k = {k}')
print(f'n = {n}')
print(f'c = {c}')

'''
Y = 60049738486696908487231121025269793292548565960737278476220709990679165953635153104491094974628316084371654377585462272642687866305392991428376968598549858595796752684661518920220626239975437691414064895642463676733108498345231004527683320732728661177764423285639576892985616687815606169375520520854166583759
k = 1.06812177272694811108821438927797561876590572464367384334840322606084373799328804487773995960179784838848538993019220719502814807202955112701807418079613602940791848787261960139482608971673561931336173876089308647681376289122381010092727824756392956350935980563710637885021397814775089163341890368162802502836735432396236993201871889127669888514064460137235655
n = 3596023580695592789457907802183196756399681015977233295242340936238317018973691599034589854880732384096820035377138261693940394499711123250057901177534616478446934890712142462629287889087402878855602205118569066176847336006999797783812847405621452976590905189308318494920580036460265251370023160444010457343969742500140268145656657584719331223994655918529509324803740906083657280801194613866731974952982345953343515716799498889563560737063361265021629014810595064645026641575740759888841089351365082040998384669205706549841999836035376731041737200044788780457487328828468423385665897008481229300042703829197546732297
c = 203888967389001610610181601143476417134547238322566249798330454501234719047131239762883296665497911055217805585041450651162745276917488079657459750899771802796714955681333597780415365371810254651462195430523242672381668466268361140273008469445121296185425908790295844531556528841683074107174953571777339913744310027149457799483986132530251645062422885009777650388210633336745992191168809481176500394999589620122461747721066331478829996392011933366508176327335982681077308808332600144583212089054079237839958737870002427686663368647458455780051253327602251757646876642924573210398563421295133998467381134193365066426
'''